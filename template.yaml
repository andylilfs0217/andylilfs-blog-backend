AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  andylilfs-blog-backend
  SAM Template for andylilfs-blog-backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  AWSENVNAME:
    Type: String
    Description: AWS Environment where code is being executed (AWS_SAM_LOCAL or AWS).
    Default: AWS
    AllowedValues:
      - AWS
      - AWS_SAM_LOCAL
  Environment:
    Type: String
    Description: The environment to deploy the stack to.
    Default: dev
    AllowedValues:
      - dev
      - stg
      - prod

Resources:
  AndylilfsBlogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  GetAllBlogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName} - ${Environment}
        - ResourceName: GetAllBlogsFunction
      CodeUri: src/Function/blog
      Handler: handler.get_blogs
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          ANDYLILFSBLOGTABLE_TABLE_NAME: !Ref AndylilfsBlogTable
          ANDYLILFSBLOGTABLE_TABLE_ARN: !GetAtt AndylilfsBlogTable.Arn
          AWSENV: !Ref AWSENVNAME
          ENV: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AndylilfsBlogTable
      Events:
        ServerlessRestApiGETblogs:
          Type: Api
          Properties:
            Path: /blogs
            Method: GET
  GetAllBlogsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllBlogsFunction}
  GetBlogByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName} - ${Environment}
        - ResourceName: GetBlogByIdFunction
      CodeUri: src/Function/blog
      Handler: handler.get_blog_by_id
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          ANDYLILFSBLOGTABLE_TABLE_NAME: !Ref AndylilfsBlogTable
          ANDYLILFSBLOGTABLE_TABLE_ARN: !GetAtt AndylilfsBlogTable.Arn
          AWSENV: !Ref AWSENVNAME
          ENV: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AndylilfsBlogTable
      Events:
        ServerlessRestApiGETblogsid:
          Type: Api
          Properties:
            Path: /blogs/{id}
            Method: GET
  GetBlogByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetBlogByIdFunction}
  CreateBlogFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName} - ${Environment}
        - ResourceName: CreateBlogFunction
      CodeUri: src/Function/blog
      Handler: handler.create_blog
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          ANDYLILFSBLOGTABLE_TABLE_NAME: !Ref AndylilfsBlogTable
          ANDYLILFSBLOGTABLE_TABLE_ARN: !GetAtt AndylilfsBlogTable.Arn
          AWSENV: !Ref AWSENVNAME
          ENV: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AndylilfsBlogTable
      Events:
        ServerlessRestApiPOSTblogs:
          Type: Api
          Properties:
            Path: /blogs
            Method: POST
  CreateBlogFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateBlogFunction}
  UpdateBlogByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName} - ${Environment}
        - ResourceName: UpdateBlogByIdFunction
      CodeUri: src/Function/blog
      Handler: handler.update_blog_by_id
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          ANDYLILFSBLOGTABLE_TABLE_NAME: !Ref AndylilfsBlogTable
          ANDYLILFSBLOGTABLE_TABLE_ARN: !GetAtt AndylilfsBlogTable.Arn
          AWSENV: !Ref AWSENVNAME
          ENV: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AndylilfsBlogTable
      Events:
        ServerlessRestApiPUTblogsid:
          Type: Api
          Properties:
            Path: /blogs/{id}
            Method: PUT
  UpdateBlogByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateBlogByIdFunction}
  DeleteBlogByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName} - ${Environment}
        - ResourceName: DeleteBlogByIdFunction
      CodeUri: src/Function/blog
      Handler: handler.delete_blog_by_id
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          ANDYLILFSBLOGTABLE_TABLE_NAME: !Ref AndylilfsBlogTable
          ANDYLILFSBLOGTABLE_TABLE_ARN: !GetAtt AndylilfsBlogTable.Arn
          AWSENV: !Ref AWSENVNAME
          ENV: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AndylilfsBlogTable
      Events:
        ServerlessRestApiDELETEblogsid:
          Type: Api
          Properties:
            Path: /blogs/{id}
            Method: DELETE
  DeleteBlogByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteBlogByIdFunction}

Outputs:
  GetAllBlogsApi:
    Description: API Gateway endpoint URL for GET all blogs function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/blogs/
  GetAllBlogsFunctionArn:
    Description: Get All Blogs Lambda Function ARN
    Value: !GetAtt GetAllBlogsFunction.Arn
  GetBlogByIdApi:
    Description: API Gateway endpoint URL for GET blog by ID function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/blogs/{id}
  GetBlogByIdFunctionArn:
    Description: Get Blog By ID Lambda Function ARN
    Value: !GetAtt GetBlogByIdFunction.Arn
  CreateBlogApi:
    Description: API Gateway endpoint URL for POST create blog function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/blogs/
  CreateBlogFunctionArn:
    Description: Create Blog Lambda Function ARN
    Value: !GetAtt CreateBlogFunction.Arn
  UpdateBlogByIdApi:
    Description: API Gateway endpoint URL for PUT update blog by ID function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/blogs/{id}
  UpdateBlogByIdFunctionArn:
    Description: Update Blog By ID Lambda Function ARN
    Value: !GetAtt UpdateBlogByIdFunction.Arn
  DeleteBlogByIdApi:
    Description: API Gateway endpoint URL for DELETE blog by ID function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/blogs/{id}
  DeleteBlogByIdFunctionArn:
    Description: Delete Blog By ID Lambda Function ARN
    Value: !GetAtt DeleteBlogByIdFunction.Arn